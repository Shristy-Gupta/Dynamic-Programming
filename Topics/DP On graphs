Varants:
1) Largest Independent Set Problem : https://www.geeksforgeeks.org/largest-independent-set-problem-dp-26/
class node
{
    public:
    int data;
    int liss;
    node *left, *right;
};

int LISS(node *root)
{
     if(root==NULL){
         return 0;
     }
     if(root->liss!=0){return root->liss;}
     if(root->left==NULL && root->right==NULL){
         //leaf
         root->liss=1;
         return root->liss;
     }
     int liss_child=LISS(root->left)+LISS(root->right);
     int liss_grand_child=1;
     if(root->left!=NULL){
         liss_grand_child+=LISS(root->left->left)+LISS(root->left->right);
     }
     if(root->right!=NULL){
         liss_grand_child+=LISS(root->right->left)+LISS(root->right->right);
     }
     root->liss=max(liss_child,liss_grand_child);
     return root->liss;
    
}
2)131. Palindrome Partitioning https://leetcode.com/problems/palindrome-partitioning/
class Solution {
public:
    bool isPalindrome(string s, int low, int high){
        if(low>high){return false;}
        while(low<=high){
            if(s[low++]!=s[high--]){return false;}
        }
        return true;
    }
    void dfs(vector<vector<string>> &result,string &s,int start, vector<string> &currentList){
        if(start==s.length()){result.push_back(currentList);return;}
        for(int end=start;end<s.length();end++){
            if(isPalindrome(s,start,end)){
                currentList.push_back(s.substr(start,end-start+1));
                 dfs(result, s, end + 1, currentList);
                // backtrack and remove the current substring from currentList
                currentList.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> currentList;
        dfs(result,s,0,currentList);
        return result;
    }
};
