Matrix chain Multiplication

6 Variants:
1) Priniting MCM
2) Evaluate expression to true or Boolean parenthesis: https://www.youtube.com/watch?v=pGVguAcWX4g&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=39
if(i>j){return false;}
if(i==j){
 if(istrue){return s[i]=='T';}
 else{return s[i]=='F';}
}
for(int k=i+1;k<=j-1;k+=2){

int lt=solve(s,i,k-1,true);
int lf=solve(s,i,k-1,false);
int rt=solve(s,k+1,j,true);
int rf=solve(s,k+1,j,false);
if(k=='^'){if(istrue)ans=lt*rf+lf*rt; else{lt*rt + rf*lf;}}
if(k=='|'){if(istrue){ans=lt*rt + lt*rf + rt*lf;}else{ ans=lf*rf;}}
if(k=='&'){if(istrue){ans=lt*rt}else{ans=lt*rf + rt*lf + lf*rf}}
}

3) Minimimum and Maximum value of an expression
4) Palindromic partitioning : https://www.youtube.com/watch?v=szKVpQtBHh8&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=36
for (k=i k=j-1) i to k and k+1 to j
for (k=i+1 k=j) i to k-1 and k to j
In the worst case for the string of size n, the maximum number of partitions are n-1. 


code:
int solve(int arr[], int i, int j){
  if(i>=j){return 0;}
  if(partition(arr,i,j){return 0;}
  int ans=INT_MAX;
  /////////////memoize (i,j)
  for(int k=i;k<j;k++){
  //partition
  /////////////memoize (1,k) and (k+1,j)
  ans=min(1+ solve(1,k) +solve(k+1,j));
  }
  return ans;
}
5) Scramble strings : https://www.youtube.com/watch?v=SqA0o-DGmEw&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=41
Base condition:
if(a.compare(b)==0){return true;}
if(a.length()<=1){return true;}

if(solve(a.substr(0,i),b.substr(n-i,i) && solve(a.substr(i,n-i),b.substr(0,i)))
or (if not reversed)
if(solve(a.substr(0,i),b.substr(0,i) && solve(a.substr(i,n-i),substr(i,n-i)))



#### code:
if(a.compare(b)==0){return true;}
if(a.length()<=1){return false;}
        for(int i=1;i<n;i++){
            if((isScramble(a.substr(0,i),b.substr(n-i,i)) && isScramble(a.substr(i,n-i),b.substr(0,n-i))) || 
               (isScramble(a.substr(0,i),b.substr(0,i)) && isScramble(a.substr(i,n-i),b.substr(i,n-i)))) {
                return true;
            }
        }
     

## Entire code:
#include<unordered_map>

class Solution {
public:
    unordered_map<string,bool> mp;
    bool isScramblehelper(string a, string b){
        if(a.compare(b)==0){return true;}
        if(a.length()<=1){return false;}
        int n=a.length();
    
        string key=a;
        key.push_back(' ');
        key.append(b);
        if(mp.find(key)!=mp.end()){return mp[key];}
        
        
        for(int i=1;i<n;i++){
            if((isScramblehelper(a.substr(0,i),b.substr(n-i,i)) && isScramblehelper(a.substr(i,n-i),b.substr(0,n-i))) || 
               (isScramblehelper(a.substr(0,i),b.substr(0,i)) && isScramblehelper(a.substr(i,n-i),b.substr(i,n-i)))) {
                return mp[key]=true;
            }
        }
        return mp[key]=false;
        
    }
    bool isScramble(string a, string b) {
        if(a.compare(b)==0){return true;}
        if(a.length()!=b.length()){return false;}
        return isScramblehelper(a,b);
    }
    
};
6) Egg dropping problem:
https://www.youtube.com/watch?v=S49zeUjeUL0&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=43

Base condition:
if(egg==1){return maxfloors;}
if(maxfloors==0 ||maxfloors==1){return maxfloors;}

int solve(int egg, int maxfloors){
if(egg==1){return maxfloors;}
if(maxfloors==0 ||maxfloors==1){return maxfloors;}
if(dp[egg][maxfloors]!=-1){return dp[egg][maxfloors];}
int mn=INT_MAX;
for(int k=1;k<=maxfloors;k++){
//memoize here also to reduce time
int temp=1+ max(solve(egg-1,k-1), solve(egg, maxfloors-k));
mn=min(mn,temp);
}
return dp[egg][maxfloors]=mn;
}


7)https://practice.geeksforgeeks.org/problems/optimal-strategy-for-a-game-1587115620/1
https://www.youtube.com/watch?v=ww4V7vRIzSk

long long maximumAmount(int arr[], int n) 
{
    //learn gap method
    long long dp[n][n];
    for(int i=0;i<n;i++){
        for(int j=i,k=0;j<n;j++,k++){
            if(i==0){
                //gap is zero
                dp[k][j]=arr[k];
            }
            else if(i==1){
                //gap is 1
                dp[k][j]=max(arr[k],arr[j]);
            }
            else{
                long long val1=arr[k]+min(dp[k+1][j-1],dp[k+2][j]);
                long long val2=arr[j]+min(dp[k+1][j-1],dp[k][j-2]);
                dp[k][j]=max(val1,val2);
            }
        }
    }
    return dp[0][n-1];
}
