/*

Initialize:
    max_so_far = INT_MIN
    max_ending_here = 0

Loop for each element of the array
  (a) max_ending_here = max_ending_here + a[i]
  (b) if(max_so_far < max_ending_here)
            max_so_far = max_ending_here
  (c) if(max_ending_here < 0)
            max_ending_here = 0
return max_so_far

*/

int maxSubArraySum(int a[], int size)
{
    int max_so_far = INT_MIN, max_ending_here = 0;
 
    for (int i = 0; i < size; i++)
    {
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
 
        if (max_ending_here < 0)
            max_ending_here = 0;
    }
    return max_so_far;
}

Variants:
1)Maximum Product Subarray

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        //kadane principle
        int res=INT_MIN,n=nums.size();
        int curMin=1,curMax=1;
        for(int i=0;i<n;i++){
            res=max(res,nums[i]);
        }
        for(int i=0;i<n;i++){
            if(nums[i]==0){
            //reset to 1
                curMin=1;curMax=1;
                continue;
            }
            int temp=curMax*nums[i];
            curMax=max(curMax*nums[i],max(curMin*nums[i],nums[i]));
            curMin=min(temp,min(curMin*nums[i],nums[i]));
            res=max(curMax,res);
        }
        return res;
    }
};
2)Kadane's Algorithm Maximum Sum
 int maxSubarraySum(int arr[], int n){
        
        int maxsofar=0,ans=INT_MIN;
        for(int i=0;i<n;i++){
            if (maxsofar<0){
                maxsofar=arr[i];
            }
            else{
                maxsofar+=arr[i];
            }
            ans=max(ans,maxsofar);
        }
       return ans; 
    }
3)Smallest sum contiguous subarray Minimum Sum
int smallestSumSubarr(int arr[], int n){
    //Kadane algorithm
    int finalans=INT_MAX;
    int smallans=0;
    for(int i=0;i<n;i++){
        if(smallans>0){
            smallans=arr[i];
        }
        else{
            smallans+=arr[i];
        }
        finalans=min(finalans,smallans);
        
    }
    return finalans;
}
4)Maximum difference of zeros and ones in binary string
int maxSubstring(string S)
	{
	   int sum=0,finalsum=INT_MIN;
	   for(int i=0;i<S.length();i++){
	       if(S[i]=='1'){
	           sum+=-1;
	       }
	       else if(S[i]=='0'){
	           sum+=1;
	       }
	       if(finalsum<sum){
	           finalsum=sum;
	       }
	       if(sum<0){
	           sum=0;
	       }
	   }
	   return finalsum;
	}
