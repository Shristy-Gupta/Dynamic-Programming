# 6 Variations:
1) Subset Sum
2) Equal Sum Partition
3) Count the subset sum
4) Min subset sum Diff
5) Target Sum
6) Number of Subset of given difference

KnapSack problem are of three types
1) Fractional Knapsack-->Greedy
2) 0/1 Knapsack
3) Unbounded Knapsack


To identify that this is a DP problem we need to focus on two things
1) Choice
2) Optimal

Given problem
weight: 1 2 4 5
Cost:   1 4 5 7


First think for smallest valid input for # Base condition
1) We have weight array, Cost array and Weight of knapsack
2) Valid weights of all the three varaibles are 0(size cannot be less than zero) , 0, 0 ( weight can never be negative)
In the above scenario the total profit is 0
if(n==0 || wt==0){ return 0;}

Second think of choice for each item/ choice diagram:
1) If the weight of the item is greater than the knapsack weight--> We cant include it.
2) If the weight of the item is lesser than the knapsack weight--> we can include it or we cant include it.
if(w>wt){//cant take hence probe further KS(weight[], Cost[], Wt,n-1); } 
else{ profit+= max(KS(weight[], Cost[], Wt,n-1),Cost[n-1]+KS(weight[], Cost[], Wt-Cost[n-1],n-1));}
return profit;


################ 0-1 Knapsack ############# MEMOIZATION ##################
int knapsack(int weight[], int Cost[], int Wt, int n){
  if(n==0||Wt==0){ return 0; }
  if(w>wt){//cant take hence probe further KS(weight[], Cost[], Wt,n-1); } 
  else{ profit+= max(KS(weight[], Cost[], Wt,n-1),Cost[n-1]+KS(weight[], Cost[], Wt-Cost[n-1],n-1));}
  return profit;
}
Here we observe that in every recursion the value of Wt and n is changing. Hence we need a grid of size O(Wt+1*n+1)
Because we also need to store the value of 0 in the matrix
therefore the matrix Dp is as follows
int dp[n+1][t+1]
memset(dp,-1,sizeOf(t))
int knapsack(int weight[], int Cost[], int Wt, int n){
  if(n==0||Wt==0){ return 0; }
  if(dp[n][w]!=-1){return dp[n][w];}
  if(w>wt){//cant take hence probe further  profit+=KS(weight[], Cost[], Wt,n-1); } 
  else{ profit+= max(KS(weight[], Cost[], Wt,n-1),Cost[n-1]+KS(weight[], Cost[], Wt-Cost[n-1],n-1));}
  dp[n][w]=profit;
  return profit;
}
################ 0-1 Knapsack ############# Top Down ##################
Base condition is changed to Initialization of matrix
int dp[n+1][t+1]
memset(dp,-1,sizeOf(t))
int knapsack(int weight[], int Cost[], int Wt, int n){
for(int i=0;i<=n;i++){
  dp[0][i]=0;
  dp[i][0]=0;
}
for(int i=1;i<=n;i++){
for(int j=1;j<=Wt;j++){
if(w[i-1]>j){//cant take hence probe further  dp[i][j]=dp[i-1][j]; } 
}
else{
dp[i][j]=max(cost[i-1]+ dp[i-1][j-weight[i-1]], dp[i-1][j]);
}
}
return dp[n][n];
}

