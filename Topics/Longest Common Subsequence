Longest Common Subsequence Types:
1) Largest Common Substring
2) Print LCS
3) Shortest Common Super sequence
4) print SCS
5) Minimum Number of Insertions and Deletions
6) Largest Repeating Subsequence
7) Length of largest subsequence which is also a substring in b
8) Sunsequence Pattern Matching
9) Count how many times a appear as sub sequence in b
10) Largest Palindromic subsequence
11) Count of palindromic sunstring
12) Min number of deletions in the string to make a palindrome
13) Min number of insertions in the string to make a palindrome 

Longest Common Subsequence:

   Subsequence is discontinous
Problem statement:
Given 2 strings X and Y
X: abcdfg
Y: abedfhl

Base Condition:
if (len(X)==0 || len(Y)==0) return 0;

Choice Diagram:
if the characters matches then, take that element and make recursive call to n-1 element
if the characters doesnt match then, take max of one of the susequence
if(X[n-1]==Y[m-1]){return 1+ sub(X,Y,n-1,m-1)} else{ return max(sub(X,Y,n,m-1), sub(X,Y,n-1,m));}


Longest Common Subsequence Memoization:
We need a matrix of size n+1 * m+1

Initialize: All the values with -1
for(int k=0; k<=n;k++){dp[k][0]=0}
for(int k=0; k<=m;k++){dp[0][k]=0}

if(X[n-1]==Y[m-1]){return dp[n][m]=dp[n][m]?:1+ sub(X,Y,n-1,m-1)} else{ return max(sub(X,Y,n,m-1), sub(X,Y,n-1,m));}
