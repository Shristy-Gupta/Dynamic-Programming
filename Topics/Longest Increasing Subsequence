
Longest Increasing Subsequence

//Recursion


#include<unordered_map>

struct hash_pair {
    template <class T1, class T2>
    size_t operator()(const pair<T1, T2>& p) const
    {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};
class Solution
{
    public:
    unordered_map<pair<long long int,long long int>,long long int,hash_pair>dp;
    int LIS(int arr[], int i, int n, int prev)
{
	// Base case: if nothing is remaining
	if (i == n)
		return 0;
	pair<long long int, long long int> a(i,prev);
	pair<long long int, long long int> b(i+1,prev);
	pair<long long int, long long int> c(i+1,arr[i]);
    if(dp.find(a)!=dp.end()){return dp[a];}		
	// case 1: exclude the current element and process the
	// remaining elements
	
	long long int exclude = 0;
	long long int include = 0;
	if(dp.find(b)!=dp.end()){
	    exclude=dp[b];
	}	
	else{
	    exclude=LIS(arr, i + 1, n, prev);
	    //dp[b]=exclude;
	    
	}

	// case 2: include the current element if it is greater
	// than previous element in LIS
	
	if (arr[i] > prev)
		include = 1 + LIS(arr, i + 1, n, arr[i]);
	// return maximum of above two choices
	return dp[a]=max(include, exclude);
	
}
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       if(n<=0){return 0;}
       if(n==1){return 1;}
          if(n==2){
              if(a[0]>=a[1]){
                  return 1;
              }
              else{
                  return 2;
              }
          }
       
       return LIS(a,0,n,INT_MIN);
    }
};

DP

#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        if(n<=1){return n;}
        int dp[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        int ans=-1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    //consider the element
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
            ans=max(ans,dp[i]);
        }
        return ans;
    }
};
Variants 
1) Longest increase Substring
2) Longest increase subarray
3) Maximum subsequence sum such that no three are consecutive
4) Longest subsequence such that difference between adjacent is one
int longestSubsequence(int N, int nums[])
    {
        int n=N;
        if(n<=1){return n;}
        int dp[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        int ans=-1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(abs(nums[j]-nums[i])==1){
                    //consider the element
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
            ans=max(ans,dp[i]);
        }
        return ans;
    }
};
5) Count all subsequences having product less than K
6) Maximum Length Chain of Pairs
int maxChainLen(struct val p[],int n)
{
   //LIS variant
   if(n<=1){return n;}
   int dp[n],ans=0;
   for(int i=0;i<n;i++){
       dp[i]=1;
   }
   for(int i=1;i<n;i++){
       for(int j=0;j<i;j++){
           if(p[j].second<p[i].first){
               dp[i]=max(dp[i],dp[j]+1);
               //dp[i]=dp[j]+1;
           }
       }
       
       ans=max(ans,dp[i]);
   }
   return ans;
}
