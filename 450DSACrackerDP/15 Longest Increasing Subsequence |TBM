#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

#include<unordered_map>

struct hash_pair {
    template <class T1, class T2>
    size_t operator()(const pair<T1, T2>& p) const
    {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};
class Solution
{
    public:
    unordered_map<pair<int,int>,int,hash_pair>dp;
    int LIS(int arr[], int i, int n, int prev)
{
	// Base case: if nothing is remaining
	if (i == n)
		return 0;
	pair<int, int> a(i,prev);	
    if(dp.find(a)!=dp.end()){return dp[a];}		
	// case 1: exclude the current element and process the
	// remaining elements
	
	int exclude = LIS(arr, i + 1, n, prev);

	// case 2: include the current element if it is greater
	// than previous element in LIS
	int include = 0;
	if (arr[i] > prev)
		include = 1 + LIS(arr, i + 1, n, arr[i]);

	// return maximum of above two choices
	return dp[a]=max(include, exclude);
	
}
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       if(n<=0){return 0;}
       if(n==1){return 1;}
          if(n==2){
              if(a[0]>=a[1]){
                  return 1;
              }
              else{
                  return 2;
              }
          }
       
       return LIS(a,0,n,INT_MIN);
    }
};

// { Driver Code Starts.
int main()
{
    //taking total testcases
    int t,n;
    cin>>t;
    while(t--)
    {
        //taking size of array
        cin>>n;
        int a[n];
        
        //inserting elements to the array
        for(int i=0;i<n;i++)
            cin>>a[i];
        Solution ob;
        //calling method longestSubsequence()
        cout << ob.longestSubsequence(n, a) << endl;
    }
}
  // } Driver Code Ends
